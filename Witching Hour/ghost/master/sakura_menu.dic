SakuraMenuGreetings : nonoverlap_pool
{
	if WitchStatus == "Polish Potion"; "[annoyed]Co chcesz?"
	else; "[annoyed]What?"
}

//Because there is an all modifier here, you don't need to write -- between menu options
OnSakuraMenu : all
{
	"\b2\![set,autoscroll,disable]\![effect]"
	if SHIORI3FW.Eventid == "OnMouseDoubleClick"; SakuraMenuGreetings //The check here is so they won't comment if you click the back button. Remove if you prefer
	
	"\![effect]\b2\n\n\_q"
	
	"\![*]\q[Talk to me,OnAiTalk]"
	if LastTalk != ""; "  \![*]\q[Say that again,OnLastTalk]"
	"\n\n"
	"\![*]\__q[OnTalkRateMenu]Change talk rate\__q\n\n"
	"\![*]\q[Settings,OnPaceSet]\n\n"
	if SHIORI3FW.DebugMode == 1; "\![*]\q[Debug Menu,OnDebug]\n\n"
	
	"\![*]\q[Nevermind,]"	
}

OnPaceSet : all
{
	for _i=0;_i<11;_i++
	{
		if Buttons[_i] == ""; Buttons[_i] = "OFF"
	}

	if PaceSetting[5] == ""; PaceSetting[5] = 10
	--

	"\_q\b2\![set,autoscroll,disable]"
	"**Ingrdidient Spawn chance:** "
	"==\![*]\q[1 in %(PaceSetting[0]),script:\![open,sliderinput,OnPace,30000,2,1,100,--reference=0\]]==\n"
	"((=-(lower = more ingredients, higher = less ingredients)-=))\n"
	
	"\n[half]**Crystal Ball:**\n"
	"Ingridient Check Cooldown: ==\![*]\q[%(PaceSetting[1]) min,script:\![open,sliderinput,OnPace,30000,5,1,120,--reference=1\]]==\n"
	"Verify all ingredients on check: \![*]\_a[OnButton,9]%(Buttons[9])\_a\n"
	"Potions Check Cooldown: ==\![*]\q[%(PaceSetting[2]) min,script:\![open,sliderinput,OnPace,30000,10,1,120,--reference=2\]]==\n"
	"Verify all potions on check: \![*]\_a[OnButton,10]%(Buttons[10])\_a\n"

	"\n[half]**Potion duration:**\n"
	"Min: ==\![*]\q[%(PaceSetting[3]) min,script:\![open,sliderinput,OnPace,30000,2,1,120,--reference=3\]]==\n"
	"Max: ==\![*]\q[%(PaceSetting[4]) min,script:\![open,sliderinput,OnPace,30000,5,1,120,--reference=4\]]==\n"
	"\n[half]**Difficulty adjustments:**\n"
	//"Comunication Potions Affect All: \q[%(Buttons[0]),OnButton,0]\n"
	"Show True Name When Discovered: \![*]\_a[OnButton,1]%(Buttons[1])\_a\n"
	"Tell me when potion failed: \![*]\_a[OnButton,2]%(Buttons[2])\_a\n"
	"Throw out failed potions: \![*]\_a[OnButton,3]%(Buttons[3])\_a\n"
	"Naming new ingredients: \![*]\_a[OnButton,4]%(Buttons[4])\_a\n"
	//if Buttons[4] == "ON"; "Use secondary names: \![*]\_a[OnButton,5]%(Buttons[5])\_a\n"
	
	"Show ingredient names right away: \![*]\_a[OnButton,6]%(Buttons[6])\_a\n"
	"Show potion names after usage: \![*]\_a[OnButton,7]%(Buttons[7])\_a\n"
	"Potions have a chance to fail despite correct recipe: \![*]\_a[OnButton,8]%(Buttons[8])\_a\n"
	if Buttons[8] == "ON"
	{
		"Potions Fail chance: ==\![*]\q[1 in %(PaceSetting[5]),script:\![open,sliderinput,OnPace,30000,10,2,120,--reference=5\]]==\n"
		"((=-(lower = higher chance, higher = lower chance)-=))\n"
	}

	"\__q[OnChangelog]**Open Changelog**\__q\n"
	"\n[half]\![*]\q[Go Back,OnSakuraMenu]\n"
	"\![*]\q[Nevermind,]"	
}

OnPace
{
	_index = TOINT(reference2)
	PaceSetting[_index] = TOINT(reference0)
	OnPaceSet
}

OnButton
{
	_index = TOINT(reference)

	if Buttons[_index] == "OFF"; Buttons[_index] = "ON"
	else; Buttons[_index] = "OFF"

	OnPaceSet
}

OnDebug : all
{
	"\b2\![*]\q[Initialize Variables,OnInitialize]\n"
	"\![*]\q[Apply potion effect,OnDebugPotions]\n"
	"\![*]\q[See all recipes,OnDisplayAllPotReq]\n"
	"\![*]\q[See all ingridient traits,OnDisplayIngrInfo]\n"
	"\![*]\q[See all Duplicate recipes,OnDisplayPotionReqDupes]\n"
	"\![*]\q[See all unused recipes,OnDisplayUnsuedRecipes]\n"
	"\![*]\q[Test,OnTest]\n"
	"\n[half]\![*]\q[Go Back,OnSakuraMenu]\n"
}

OnTest : all
{
	_a = FOPEN("test.txt","w")
		for _i = 5005,_j = 800; _j < 820; _i++
		{	
			if _j != 804 && _j != 819
			{
				_a = FWRITE("test.txt","surface" + _i)
				_a = FWRITE("test.txt","{")
				_a = FWRITE("test.txt","	animation0.interval,always")
				_a = FWRITE("test.txt","	animation0.pattern0,overlay,"+_j+",0,0,0")
				_a = FWRITE("test.txt","")
				_a = FWRITE("test.txt","	animation1.interval,random,4")
				_a = FWRITE("test.txt","	animation1.pattern0,overlay," + (1 + _j) + ",200,0,0")
				_a = FWRITE("test.txt","	animation1.pattern0,overlay,-1,200,0,0")
				_j+=2
			}
			else
			{


				_a = FWRITE("test.txt","surface" + _i)
				_a = FWRITE("test.txt","{")
				_a = FWRITE("test.txt","	animation0.interval,always")
				_a = FWRITE("test.txt","	animation0.pattern0,overlay,"+_j+",0,0,0")
				_j++
			}
			--
			_a = FWRITE("test.txt","")
			_a = FWRITE("test.txt","	animation1000.interval,never")
			_a = FWRITE("test.txt","	animation1000.pattern1,stop,0")
			_a = FWRITE("test.txt","	animation1000.pattern1,overlay,700,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern2,overlay,701,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern3,overlay,702,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern4,overlay,703,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern5,overlay,704,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern6,overlay,703,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern7,overlay,704,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern1,start,0")
			_a = FWRITE("test.txt","	animation1000.pattern8,overlay,703,0,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern9,overlay,704,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern10,overlay,703,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern11,overlay,702,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern12,overlay,701,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern13,overlay,700,150,0,0")
			_a = FWRITE("test.txt","	animation1000.pattern14,overlay,-1,150,0,0")
			_a = FWRITE("test.txt","}")
			_a = FWRITE("test.txt","")
		}
	_a = FCLOSE("test.txt")
	--
	"\![open,file,test.txt]"
}

OnDebugPotions : all
{
	"\b2\_q\![set,autoscroll,disable]"
	for _i = 0; _i < ARRAYSIZE(potName); _i++
	{
		"\![*]\q[%(potName[_i]),OnSetState,%(potName[_i])]\n"
	}
	"\n[half]\![*]\q[Go Back,OnDebug]\n"
	"\n[half]\![*]\q[Close,]\n"
}

OnSetState
{
	if reference0 != ""; WitchStatus = reference0
	elseif _argv[0] != ""; WitchStatus = _argv[0]
	--
	OnPotionEffects
	--
	OnDebugPotions
}

OnLastTalk
{
	LastTalk
}

OnTalkRateMenu : all
{	
	//This is just setting up a label, you may need to add to it or tweak it if you change what rates are available
	_talkrate = "Off"
	if aitalkinterval == 30; _talkrate = "30 seconds"
	elseif aitalkinterval == 60; _talkrate = "1 minute"
	elseif aitalkinterval == 180; _talkrate = "3 minutes"
	elseif aitalkinterval == 300; _talkrate = "5 minutes"
	elseif aitalkinterval == 600; _talkrate = "10 minutes"
	
	"\0\b2\![set,autoscroll,disable]\_q"
	"Current interval: %(_talkrate)\n\n"
	
	"\![*]\q[Off,OnTalkRateChange,0]\n"
	"\![*]\q[30 seconds,OnTalkRateChange,30]\n"
	"\![*]\q[1 minute,OnTalkRateChange,60]\n"
	"\![*]\q[3 minutes,OnTalkRateChange,180]\n"
	"\![*]\q[5 minutes,OnTalkRateChange,300]\n"
	"\![*]\q[10 minutes,OnTalkRateChange,600]\n"
	"\n"
	"\![*]\q[Back,OnSakuraMenu]  \![*]\q[Nevermind,]"
}

OnTalkRateChange
{
	aitalkinterval = TOINT(reference0)
}